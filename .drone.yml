branches:
  - master
  - 1.x
  - 2.x
  # This is very useful when debugging drone related issues. Just prefix your branch with "drone-"
  # to trigger a drone build.
  - drone-*

workspace:
  base: /root/go
  path: src/github.com/presslabs/mysql-operator

clone:
  git:
    image: plugins/git
    depth: 100
    tags: true

pipeline:
  dependencies:
    image: quay.io/presslabs/bfc
    commands:
      - make dependencies

  lint:
    group: lint
    image: quay.io/presslabs/bfc:0.3
    commands:
      - make lint

  lint-chart:
    group: lint
    image: quay.io/presslabs/kluster-toolbox
    pull: true
    commands:
      - helm lint charts/mysql-operator
      - helm dep build charts/mysql-operator

  test:
    group: test
    image: quay.io/presslabs/bfc:0.3
    commands:
      - make test

  verify-generate:
    image: quay.io/presslabs/bfc:0.3
    commands:
      - make -s fmt generate manifests
      - git diff --exit-code

  build-chart:
    group: build
    image: quay.io/presslabs/bfc
    commands:
      - make chart

  publish-operator:
    group: publish
    image: plugins/docker
    registry: quay.io
    repo: quay.io/presslabs/mysql-operator
    username: presslabs+drone
    tags: ["${DRONE_BRANCH/master/latest}"]
    secrets:
      - source: QUAY_TOKEN
        target: DOCKER_PASSWORD
    when:
      event: push

  publish-operator:
    group: publish
    image: plugins/docker
    registry: quay.io
    repo: quay.io/presslabs/mysql-operator
    username: presslabs+drone
    auto_tag: true
    secrets:
      - source: QUAY_TOKEN
        target: DOCKER_PASSWORD
    when:
      event: tag

  publish-sidecar:
    group: publish
    image: plugins/docker
    registry: quay.io
    repo: quay.io/presslabs/mysql-operator-sidecar
    username: presslabs+drone
    dockerfile: Dockerfile.sidecar
    tags: ["${DRONE_BRANCH/master/latest}"]
    secrets:
      - source: QUAY_TOKEN
        target: DOCKER_PASSWORD
    when:
      event: push

  publish-sidecar:
    group: publish
    image: plugins/docker
    registry: quay.io
    repo: quay.io/presslabs/mysql-operator-sidecar
    username: presslabs+drone
    dockerfile: Dockerfile.sidecar
    auto_tag: true
    secrets:
      - source: QUAY_TOKEN
        target: DOCKER_PASSWORD
    when:
      event: tag

  publish-orchestrator:
    group: publish
    image: plugins/docker
    registry: quay.io
    repo: quay.io/presslabs/mysql-operator-orchestrator
    username: presslabs+drone
    dockerfile: Dockerfile.orchestrator
    tags: ["${DRONE_BRANCH/master/latest}"]
    secrets:
      - source: QUAY_TOKEN
        target: DOCKER_PASSWORD
    when:
      event: push

  publish-orchestrator:
    group: publish
    image: plugins/docker
    registry: quay.io
    repo: quay.io/presslabs/mysql-operator-orchestrator
    username: presslabs+drone
    dockerfile: Dockerfile.orchestrator
    auto_tag: true
    secrets:
      - source: QUAY_TOKEN
        target: DOCKER_PASSWORD
    when:
      event: tag

  publish-helm-chart:
    image: quay.io/presslabs/kluster-toolbox
    pull: true
    environment:
      - GH_USER=presslabs-bot
    commands:
      - cd charts
      - (cd mysql-operator && helm dep build)
      - helm package mysql-operator
      - CHART="$(basename *.tgz)" ; MESSAGE="Publish $(basename $CHART .tgz)"
      - /usr/local/bin/gh put --skip-existing -m "$MESSAGE" "$CHART" "presslabs/charts/docs/"
      - rm *.tgz
      # publish cluster chart
      - (cd mysql-cluster && helm dep build)
      - helm package mysql-cluster
      - CHART="$(basename *.tgz)" ; MESSAGE="Publish $(basename $CHART .tgz)"
      - /usr/local/bin/gh put --skip-existing -m "$MESSAGE" "$CHART" "presslabs/charts/docs/"
    secrets:
      - GH_PASSWORD
    when:
      event: tag

#
# Documentation
#

  trigger-docs-build:
    image: plugins/downstream
    server: https://drone.presslabs.net
    fork: true
    secrets:
      - DRONE_TOKEN
    repositories:
      - presslabs/docs
    when:
      branch: master
      event: push

#
# end to end testing
#

  start-kubernetes:
    image: quay.io/presslabs/bfc:0.3
    group: publish
    secrets:
      - GOOGLE_CREDENTIALS
    environment:
      - CLUSTER_NAME=mysql-op-x${DRONE_BUILD_NUMBER}
      - KUBECONFIG=/root/go/.kube/config
      - HELM_HOME=/root/go/.helm/
    commands:
      - setup-credentials-helper.sh
      - gcloud container clusters create $CLUSTER_NAME
          --zone europe-west3-b --project testing-reactor
          --preemptible  --cluster-version 1.14
      # update chart deps
      - helm dependency update charts/mysql-operator
    when:
      branch: master
      event: push

  e2e-tests:
    image: quay.io/presslabs/bfc:0.3
    secrets:
      - GOOGLE_CREDENTIALS
    environment:
      - APP_VERSION=${DRONE_TAG}
      - KUBECONFIG=/root/go/.kube/config
      - HELM_HOME=/root/go/.helm/
      - CLUSTER_NAME=mysql-op-x${DRONE_BUILD_NUMBER}
      - BACKUP_BUCKET_NAME=pl-test-mysql-operator
    commands:
      - go test ./test/e2e -v --kubernetes-config /root/go/.kube/config --kubernetes-context gke_testing-reactor_europe-west3-b_$CLUSTER_NAME
            --operator-image quay.io/presslabs/mysql-operator:${DRONE_BRANCH/master/latest}
            --sidecar-image quay.io/presslabs/mysql-operator-sidecar:${DRONE_BRANCH/master/latest}
            --orchestrator-image quay.io/presslabs/mysql-operator-orchestrator:${DRONE_BRANCH/master/latest}
            --pod-wait-timeout 150
            --dump-logs-on-failure=false
            -timeout 40m
            -ginkgo.slowSpecThreshold 300
    when:
      branch: master
      event: push

  stop-kubernetes:
    image: quay.io/presslabs/bfc:0.3
    secrets:
      - GOOGLE_CREDENTIALS
    environment:
      - CLUSTER_NAME=mysql-op-x${DRONE_BUILD_NUMBER}
      - KUBECONFIG=/root/go/.kube/config
    commands:
      - setup-credentials-helper.sh
      - gcloud container clusters delete $CLUSTER_NAME --quiet --zone europe-west3-b --project testing-reactor
    when:
      status: [ success, failure ]
      branch: master
      event: push

