{{- $fullName := include "mysql-operator.fullname" . }}
{{- $replicas := int .Values.replicas -}}
{{- $chart := include "mysql-operator.chart" . }}
{{- range $i := until $replicas -}}
{{/*
this service is needed for rafting. https://github.com/presslabs/mysql-operator/issues/107
and for routing/proxying to the leader.
*/}}
apiVersion: v1
kind: Service
metadata:
  name: {{ $fullName }}-{{ $i }}-svc
  labels:
    app: {{ $fullName }}
    chart: {{ $chart }}
    release: {{ $.Release.Name }}
    heritage: {{ $.Release.Service }}
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 80
    targetPort: 3000
  - name: raft
    port: 10008
    targetPort: 10008
  selector:
    statefulset.kubernetes.io/pod-name: {{ $fullName }}-{{ $i }}
---
{{end}}
{{/*{orchestrator will make sure that this service always talks to the leader}*/}}
apiVersion: v1
kind: Service
metadata:
  name: {{ template "mysql-operator.fullname" . }}
  labels:
    app: {{ template "mysql-operator.name" . }}
    chart: {{ template "mysql-operator.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.orchestrator.service.type }}
  selector:
    app: {{ template "mysql-operator.name" . }}
  ports:
  - name: http
    port: {{ .Values.orchestrator.service.port }}
    protocol: TCP
    targetPort: 3000
    {{- if .Values.orchestrator.service.nodePort }}
    nodePort: {{ .Values.orchestrator.service.nodePort }}
    {{- end }}
